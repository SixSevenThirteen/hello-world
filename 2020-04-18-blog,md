##Java常用的排序算法学习
1.冒泡排序
基本思想：从第一个元素开始，与下一个元素比较，若大于则交换位置，小于则不动，所以会经过N-1趟排序，每一趟会把大的元素沉底，小的元素浮上来，所以叫冒泡排序。
代码示例:
void sort(int[] arr){
     for(int i=0;i<arr.length;i++){
         for (int j=i+1;j<arr.length;j++){
             //从第一个元素开始，与下一个元素比较，若大于则交换位置，小于则不动
               if(arr[j]<arr[i]){
                   int temp=arr[i];
                   arr[i]=arr[j];
                   arr[j]=temp;
               }
         }
        }
        System.out.println(Arrays.toString(arr));
  }
  
  2.插入排序
  基本思想：从数组的第二个元素开始，若比前一个元素小，就向前移动（若大于就不用移动），直到插入到合适的位置，然后再去排第三个元素，依次类推，最后一个插入到合适位置时，数组的排序就完成了。
  代码示例：
  void sort(int[] arr){
        int temp;
        int j;
        for(int i=1;i<arr.length;i++){
             temp=arr[i];
            for(j = i;j > 0 && temp <arr[j-1];j--){
                arr[j]=arr[j-1];//前一个较大的元素换到 j 下标位置
            }
            arr[j] = temp;	//上述条件不满足时的 j 下标位置就是temp适合的位置，temp保存元素插入到此
        }
        System.out.println(Arrays.toString(arr));
    }
   3.选择排序
   基本思想:每次从待排序的数据元素中选择最大或最小的一个元素，放在待排序数列的最前面
   代码示例:
   void sort(int[] arr){
        for(int i=0;i<arr.length;i++){
            int min=arr[i];
            int minIndex=i;
          for(int j=i+1;j<arr.length;j++){ //找到最小的值和位置
              if(arr[j]>arr[j]){
                  min=arr[j];
                  minIndex=j;
              }
            }
            arr[i]=arr[minIndex];
        }
        System.out.println(Arrays.toString(arr));
    }
    4.快速排序(重点）
    基本思想:通过一轮的排序将序列分割成独立的两部分，其中一部分序列的值均比另一部分的值小继续对长度较短的序列进行同样的分割，
    最后到达整体有序在排序过程中，由于已经分开的两部分的元素不需要进行比较，故减少了比较次数，降低了排序时间。
    详细描述：选择序列的第一个元素ARR [0]为基准值，先从后往前比较（基准值选择的是ARR [0]，就从后往前，原因和简单，考虑下前后相遇的情况），
    用基准值和最后一个值比较，如果比基准值小的交换位置，如果没有继续比较下一个，直到找到第一个比基准值小的值才交换。找到这个值之后，又从前往后开始比较，
    如果有比基准值大的，交换位置，如果没有继续比较下一个，直到找到第一个比基准值大的值才交换。直到从前往后的索引和从后往前比较的索引相等，
    将这个索引上的值和基准值对调，结束第一次循环，此时，对于基准值来说，左右两边就是有序的了。然后再将左右两边的序列递归调用改方法，直至排序完成。
    代码示例：
     void quickSort(int[] numbers, int start, int end) {
        if (start < end) {
            int base = numbers[start]; // 选定的基准值（第一个数值作为基准值）
            int temp; // 记录临时中间值
            int i = start, j = end;
            do {
                while ((numbers[i] < base) && (i < end))
                    i++;
                while ((numbers[j] > base) && (j > start))
                    j--;
                if (i <= j) {
                    temp = numbers[i];
                    numbers[i] = numbers[j];
                    numbers[j] = temp;
                    i++;
                    j--;
                }
            } while (i <= j);
            if (start < j)
                quickSort(numbers, start, j);
            if (end > i)
                quickSort(numbers, i, end);
        }
    }
    
   
    
